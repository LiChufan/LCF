import tensorflow as tf
import pathlib
import numpy as np
import random
import IPython.display as display
import matplotlib.pyplot as plt
import pydot
import os

gpu=tf.config.experimental.list_physical_devices(device_type='GPU')

tf.config.experimental.set_virtual_device_configuration(gpu[0],[tf.config.experimental.VirtualDeviceConfiguration(memory_limit=1024*20)])

data_load=pathlib.Path('F:/trilobite')
all_image_path=list(data_load.glob('*/*'))
all_image_path=[str(path) for path in all_image_path]
random.shuffle(all_image_path)
label_name=sorted(item.name for item in data_load.glob('*'))
label_number=dict((number,name) for name,number in enumerate(label_name))
all_image_label=[label_number[pathlib.Path(p).parent.name]for p in all_image_path]

def preprocess_image(path):
    image_raw=tf.io.read_file(path)
    img_tensor=tf.image.decode_jpeg(image_raw,channels=3)
    img_tensor=tf.image.resize(img_tensor,[256,256])
    img_tensor=tf.cast(img_tensor,tf.float32)
    image=img_tensor/255
    return image

path_ds=tf.data.Dataset.from_tensor_slices(all_image_path)
image_dataset=path_ds.map(preprocess_image)
label_dataset=tf.data.Dataset.from_tensor_slices(all_image_label)
dataset=tf.data.Dataset.zip((image_dataset,label_dataset))

train_dataset=dataset.skip(60)
test_dataset=dataset.take(60)
ds_train=train_dataset.shuffle(430).repeat().batch(43)
ds_test=test_dataset.batch(60)
inputs=tf.keras.layers.Input(shape=(256,256,3),name='Input_Layer')
x=tf.keras.layers.Conv2D(32,3,padding='same',activation='relu',kernel_regularizer=tf.keras.regularizers.l2(0.00003),
                         kernel_initializer=tf.keras.initializers.glorot_normal(seed=1130))(inputs)
x=tf.keras.layers.BatchNormalization()(x)
x=tf.keras.layers.Conv2D(32,3,padding='same',activation='relu',kernel_regularizer=tf.keras.regularizers.l2(0.00003),
                         kernel_initializer=tf.keras.initializers.glorot_normal(seed=1130))(x)
x=tf.keras.layers.BatchNormalization()(x)


x1=tf.keras.layers.MaxPooling2D()(x)

x1=tf.keras.layers.Conv2D(64,3,padding='same',activation='relu',kernel_regularizer=tf.keras.regularizers.l2(0.00003),
                         kernel_initializer=tf.keras.initializers.glorot_normal(seed=1130))(x1)
x1=tf.keras.layers.BatchNormalization()(x1)
x1=tf.keras.layers.Conv2D(64,3,padding='same',activation='relu',kernel_regularizer=tf.keras.regularizers.l2(0.00003),
                         kernel_initializer=tf.keras.initializers.glorot_normal(seed=1130))(x1)
x1=tf.keras.layers.BatchNormalization()(x1) 

x2=tf.keras.layers.MaxPool2D()(x1)

x2=tf.keras.layers.Conv2D(128,3,padding='same',activation='relu',kernel_regularizer=tf.keras.regularizers.l2(0.00003),
                         kernel_initializer=tf.keras.initializers.glorot_normal(seed=1130))(x2)
x2=tf.keras.layers.BatchNormalization()(x2)
x2=tf.keras.layers.Conv2D(128,3,padding='same',activation='relu',kernel_regularizer=tf.keras.regularizers.l2(0.00003),
                         kernel_initializer=tf.keras.initializers.glorot_normal(seed=1130))(x2)
x2=tf.keras.layers.BatchNormalization()(x2) 


x4=tf.keras.layers.Conv2DTranspose(64,2,strides=2,padding='same',
                                   activation='relu',kernel_regularizer=tf.keras.regularizers.l2(0.00003),
                         kernel_initializer=tf.keras.initializers.glorot_normal(seed=1130))(x2)
x4=tf.keras.layers.BatchNormalization()(x4)
x5=tf.concat([x1,x4],axis=-1)
x5=tf.keras.layers.Conv2D(128,3,padding='same',activation='relu',kernel_regularizer=tf.keras.regularizers.l2(0.00003),
                         kernel_initializer=tf.keras.initializers.glorot_normal(seed=1130))(x5)
x5=tf.keras.layers.BatchNormalization()(x5)
x5=tf.keras.layers.Conv2D(128,3,padding='same',activation='relu',kernel_regularizer=tf.keras.regularizers.l2(0.00003),
                         kernel_initializer=tf.keras.initializers.glorot_normal(seed=1130))(x5)
x5=tf.keras.layers.BatchNormalization()(x5)

x6=tf.keras.layers.Conv2DTranspose(32,2,strides=2,padding='same',
                                   activation='relu',kernel_regularizer=tf.keras.regularizers.l2(0.00003),
                         kernel_initializer=tf.keras.initializers.glorot_normal(seed=1130))(x5)
x6=tf.keras.layers.BatchNormalization()(x6)
x7=tf.concat([x,x6],axis=-1)

x8=tf.keras.layers.Conv2D(64,3,padding='same',activation='relu',kernel_regularizer=tf.keras.regularizers.l2(0.00003),
                         kernel_initializer=tf.keras.initializers.glorot_normal(seed=1130))(x7)
x8=tf.keras.layers.BatchNormalization()(x8)
x8=tf.keras.layers.Conv2D(64,3,padding='same',activation='relu',kernel_regularizer=tf.keras.regularizers.l2(0.00003),
                         kernel_initializer=tf.keras.initializers.glorot_normal(seed=1130))(x8)

x9=tf.keras.layers.GlobalMaxPool2D()(x8)

x10=tf.keras.layers.Dense(32,activation='relu',kernel_regularizer=tf.keras.regularizers.l2(0.00003),
                         kernel_initializer=tf.keras.initializers.glorot_normal(seed=1130))(x9)
x10=tf.keras.layers.Dense(16,activation='relu',kernel_regularizer=tf.keras.regularizers.l2(0.00003),
                         kernel_initializer=tf.keras.initializers.glorot_normal(seed=1130))(x10)
x10=tf.keras.layers.Dense(8,activation='relu',kernel_regularizer=tf.keras.regularizers.l2(0.00003),
                         kernel_initializer=tf.keras.initializers.glorot_normal(seed=1130))(x10)
outputs=tf.keras.layers.Dense(4,activation='softmax')(x10)

model=tf.keras.Model(inputs=inputs,
                     outputs=outputs)

lr_reduce=tf.keras.callbacks.ReduceLROnPlateau(monitor='val_acc',patience=10,factor=0.5,min_lr=0.00001,restore_best_weights=True)


model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.001),
              loss='sparse_categorical_crossentropy',
              metrics=['acc'])

history=model.fit(ds_train,
          epochs=500,
          steps_per_epoch=10,
          validation_data=ds_test,
          validation_steps=1,
          callbacks=[lr_reduce])
